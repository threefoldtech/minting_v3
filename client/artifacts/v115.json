[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; /*«*/ 32 /*»*/]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 14,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "sequence": {
                  "type": 16
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 136,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 137,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "tfchain_runtime",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ValidatorSet",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "validatorset::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 30,
                          "typeName": "pallet_session::Event"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "pallet_grandpa::Event"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 36,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "TfgridModule",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_tfgrid::Event<Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "SmartContractModule",
                      "fields": [
                        {
                          "type": 95,
                          "typeName": "pallet_smart_contract::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "TFTBridgeModule",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "pallet_tft_bridge::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "TFTPriceModule",
                      "fields": [
                        {
                          "type": 121,
                          "typeName": "pallet_tft_price::Event<Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 122,
                          "typeName": "pallet_scheduler::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "BurningModule",
                      "fields": [
                        {
                          "type": 126,
                          "typeName": "pallet_burning::Event<Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "TFKVStore",
                      "fields": [
                        {
                          "type": 127,
                          "typeName": "pallet_kvstore::Event<Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "CouncilMembership",
                      "fields": [
                        {
                          "type": 129,
                          "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Validator",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "pallet_validator::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Dao",
                      "fields": [
                        {
                          "type": 133,
                          "typeName": "pallet_dao::Event<Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 135,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 23
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 22,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 23,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 24,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 14,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 28,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "substrate_validator_set",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidatorAdditionInitiated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New validator addition initiated. Effective in ~2 sessions."
                      ]
                    },
                    {
                      "name": "ValidatorRemovalInitiated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Validator removal initiated. Effective in ~2 sessions."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewSession",
                      "fields": [
                        {
                          "name": "session_index",
                          "type": 4,
                          "typeName": "SessionIndex"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New session has happened. Note that the argument is the session index, not the",
                        "block number as the type might suggest."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 32,
                          "typeName": "AuthorityList"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "def": {
                "sequence": {
                  "type": 33
                }
              }
            }
          },
          {
            "id": 33,
            "type": {
              "def": {
                "tuple": [
                  34,
                  8
                ]
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "ed25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 38
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 38
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 22
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FarmStored",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "FarmInfoOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "FarmUpdated",
                      "fields": [
                        {
                          "type": 41,
                          "typeName": "FarmInfoOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "FarmDeleted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "NodeStored",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "Node<pallet::PubConfigOf<T>, pallet::InterfaceOf<T>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "NodeUpdated",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "Node<pallet::PubConfigOf<T>, pallet::InterfaceOf<T>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "NodeDeleted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "NodeUptimeReported",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "NodePublicConfigStored",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 82,
                          "typeName": "Option<pallet::PubConfigOf<T>>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "EntityStored",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "types::Entity<T::AccountId>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "EntityUpdated",
                      "fields": [
                        {
                          "type": 85,
                          "typeName": "types::Entity<T::AccountId>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "EntityDeleted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "TwinStored",
                      "fields": [
                        {
                          "type": 86,
                          "typeName": "types::Twin<T::TwinIp, T::AccountId>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "TwinUpdated",
                      "fields": [
                        {
                          "type": 86,
                          "typeName": "types::Twin<T::TwinIp, T::AccountId>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "TwinEntityStored",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "TwinEntityRemoved",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "TwinDeleted",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "PricingPolicyStored",
                      "fields": [
                        {
                          "type": 90,
                          "typeName": "types::PricingPolicy<T::AccountId>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "FarmingPolicyStored",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "types::FarmingPolicy<T::BlockNumber>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "FarmPayoutV2AddressRegistered",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "FarmMarkedAsDedicated",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "ConnectionPriceSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "NodeCertificationSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 84,
                          "typeName": "NodeCertification"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "NodeCertifierAdded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "NodeCertifierRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "FarmingPolicyUpdated",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "types::FarmingPolicy<T::BlockNumber>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "FarmingPolicySet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 53,
                          "typeName": "Option<FarmingPolicyLimit>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "FarmCertificationSet",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 49,
                          "typeName": "FarmCertification"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "ZosVersionUpdated",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 27
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "Farm"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 42
                },
                {
                  "name": "PublicIP",
                  "type": 44
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 42,
                      "typeName": "Name"
                    },
                    {
                      "name": "twin_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "pricing_policy_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "certification",
                      "type": 49,
                      "typeName": "FarmCertification"
                    },
                    {
                      "name": "public_ips",
                      "type": 50,
                      "typeName": "BoundedVec<PublicIP, ConstU32<256>>"
                    },
                    {
                      "name": "dedicated_farm",
                      "type": 52,
                      "typeName": "bool"
                    },
                    {
                      "name": "farming_policy_limits",
                      "type": 53,
                      "typeName": "Option<FarmingPolicyLimit>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_tfgrid",
                "farm",
                "FarmName"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 43,
                      "typeName": "BoundedVec<u8, T::MaxFarmNameLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "PublicIP"
              ],
              "params": [
                {
                  "name": "Ip",
                  "type": 45
                },
                {
                  "name": "Gateway",
                  "type": 47
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip",
                      "type": 45,
                      "typeName": "Ip"
                    },
                    {
                      "name": "gateway",
                      "type": 47,
                      "typeName": "Gateway"
                    },
                    {
                      "name": "contract_id",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_ip",
                "PublicIP"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 46,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_IP_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_ip",
                "GatewayIP"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 48,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_GATEWAY_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "FarmCertification"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotCertified",
                      "index": 0
                    },
                    {
                      "name": "Gold",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 44
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 51,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "def": {
                "sequence": {
                  "type": 44
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 54
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 54
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "FarmingPolicyLimit"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "farming_policy_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "cu",
                      "type": 55,
                      "typeName": "Option<u64>"
                    },
                    {
                      "name": "su",
                      "type": 55,
                      "typeName": "Option<u64>"
                    },
                    {
                      "name": "end",
                      "type": 55,
                      "typeName": "Option<u64>"
                    },
                    {
                      "name": "node_count",
                      "type": 56,
                      "typeName": "Option<u32>"
                    },
                    {
                      "name": "node_certification",
                      "type": 52,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "Node"
              ],
              "params": [
                {
                  "name": "PubConfig",
                  "type": 58
                },
                {
                  "name": "If",
                  "type": 71
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "farm_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "twin_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "resources",
                      "type": 80,
                      "typeName": "Resources"
                    },
                    {
                      "name": "location",
                      "type": 81,
                      "typeName": "Location"
                    },
                    {
                      "name": "country",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "city",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "public_config",
                      "type": 82,
                      "typeName": "Option<PubConfig>"
                    },
                    {
                      "name": "created",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "farming_policy_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "interfaces",
                      "type": 83,
                      "typeName": "Vec<If>"
                    },
                    {
                      "name": "certification",
                      "type": 84,
                      "typeName": "NodeCertification"
                    },
                    {
                      "name": "secure_boot",
                      "type": 52,
                      "typeName": "bool"
                    },
                    {
                      "name": "virtualized",
                      "type": 52,
                      "typeName": "bool"
                    },
                    {
                      "name": "serial_number",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "connection_price",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "PublicConfig"
              ],
              "params": [
                {
                  "name": "IP4",
                  "type": 59
                },
                {
                  "name": "IP6",
                  "type": 62
                },
                {
                  "name": "Domain",
                  "type": 68
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip4",
                      "type": 59,
                      "typeName": "IP4"
                    },
                    {
                      "name": "ip6",
                      "type": 62,
                      "typeName": "IP6"
                    },
                    {
                      "name": "domain",
                      "type": 68,
                      "typeName": "Domain"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "IP"
              ],
              "params": [
                {
                  "name": "IpAddr",
                  "type": 60
                },
                {
                  "name": "Gw",
                  "type": 61
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip",
                      "type": 60,
                      "typeName": "IpAddr"
                    },
                    {
                      "name": "gw",
                      "type": 61,
                      "typeName": "Gw"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_config",
                "IP4"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 46,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_IP_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_config",
                "GW4"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 48,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_GATEWAY_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 63
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 63
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "IP"
              ],
              "params": [
                {
                  "name": "IpAddr",
                  "type": 64
                },
                {
                  "name": "Gw",
                  "type": 66
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip",
                      "type": 64,
                      "typeName": "IpAddr"
                    },
                    {
                      "name": "gw",
                      "type": 66,
                      "typeName": "Gw"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_config",
                "IP6"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 65,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_IP6_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_config",
                "GW6"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 67,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_GW6_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 69
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 69
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pub_config",
                "Domain"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 70,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_DOMAIN_NAME_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "Interface"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 72
                },
                {
                  "name": "Mac",
                  "type": 74
                },
                {
                  "name": "Ips",
                  "type": 76
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 72,
                      "typeName": "Name"
                    },
                    {
                      "name": "mac",
                      "type": 74,
                      "typeName": "Mac"
                    },
                    {
                      "name": "ips",
                      "type": 76,
                      "typeName": "Ips"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_tfgrid",
                "interface",
                "InterfaceName"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 73,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_INTF_NAME_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "pallet_tfgrid",
                "interface",
                "InterfaceMac"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 75,
                      "typeName": "BoundedVec<u8, ConstU32<INTERFACE_MAC_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 77
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 79,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "pallet_tfgrid",
                "interface",
                "InterfaceIp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 78,
                      "typeName": "BoundedVec<u8, ConstU32<MAX_INTERFACE_IP_LENGTH>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "def": {
                "sequence": {
                  "type": 77
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "Resources"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "hru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "sru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "cru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "mru",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "Location"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "longitude",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "latitude",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 58
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 58
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "def": {
                "sequence": {
                  "type": 71
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "NodeCertification"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Diy",
                      "index": 0
                    },
                    {
                      "name": "Certified",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "Entity"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "country",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "city",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "Twin"
              ],
              "params": [
                {
                  "name": "TwinIp",
                  "type": 87
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "ip",
                      "type": 87,
                      "typeName": "TwinIp"
                    },
                    {
                      "name": "entities",
                      "type": 88,
                      "typeName": "Vec<EntityProof>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "pallet_tfgrid",
                "twin",
                "TwinIp"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 67,
                      "typeName": "BoundedVec<u8, ConstU32<39>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "def": {
                "sequence": {
                  "type": 89
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "EntityProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "entity_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "signature",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "PricingPolicy"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "su",
                      "type": 91,
                      "typeName": "Policy"
                    },
                    {
                      "name": "cu",
                      "type": 91,
                      "typeName": "Policy"
                    },
                    {
                      "name": "nu",
                      "type": 91,
                      "typeName": "Policy"
                    },
                    {
                      "name": "ipu",
                      "type": 91,
                      "typeName": "Policy"
                    },
                    {
                      "name": "unique_name",
                      "type": 91,
                      "typeName": "Policy"
                    },
                    {
                      "name": "domain_name",
                      "type": 91,
                      "typeName": "Policy"
                    },
                    {
                      "name": "foundation_account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "certified_sales_account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "discount_for_dedication_nodes",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "Policy"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "value",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "unit",
                      "type": 92,
                      "typeName": "Unit"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "Unit"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Bytes",
                      "index": 0
                    },
                    {
                      "name": "Kilobytes",
                      "index": 1
                    },
                    {
                      "name": "Megabytes",
                      "index": 2
                    },
                    {
                      "name": "Gigabytes",
                      "index": 3
                    },
                    {
                      "name": "Terrabytes",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "FarmingPolicy"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "name",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "cu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "su",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "nu",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "ipv4",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "minimal_uptime",
                      "type": 94,
                      "typeName": "u16"
                    },
                    {
                      "name": "policy_created",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "policy_end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "immutable",
                      "type": 52,
                      "typeName": "bool"
                    },
                    {
                      "name": "default",
                      "type": 52,
                      "typeName": "bool"
                    },
                    {
                      "name": "node_certification",
                      "type": 84,
                      "typeName": "NodeCertification"
                    },
                    {
                      "name": "farm_certification",
                      "type": 49,
                      "typeName": "FarmCertification"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "pallet_smart_contract",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ContractCreated",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "types::Contract<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A contract got created"
                      ]
                    },
                    {
                      "name": "ContractUpdated",
                      "fields": [
                        {
                          "type": 96,
                          "typeName": "types::Contract<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A contract was updated"
                      ]
                    },
                    {
                      "name": "NodeContractCanceled",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "twin_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A Node contract is canceled"
                      ]
                    },
                    {
                      "name": "NameContractCanceled",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A Name contract is canceled"
                      ]
                    },
                    {
                      "name": "IPsReserved",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "public_ips",
                          "type": 102,
                          "typeName": "BoundedVec<ContractPublicIP<T>, MaxNodeContractPublicIPs<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "IP got reserved by a Node contract"
                      ]
                    },
                    {
                      "name": "IPsFreed",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "public_ips",
                          "type": 102,
                          "typeName": "BoundedVec<ContractPublicIP<T>, MaxNodeContractPublicIPs<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "IP got freed by a Node contract"
                      ]
                    },
                    {
                      "name": "ContractDeployed",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Deprecated event"
                      ]
                    },
                    {
                      "name": "ConsumptionReportReceived",
                      "fields": [
                        {
                          "type": 107,
                          "typeName": "types::Consumption"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Deprecated event"
                      ]
                    },
                    {
                      "name": "ContractBilled",
                      "fields": [
                        {
                          "type": 108,
                          "typeName": "types::ContractBill"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "TokensBurned",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A certain amount of tokens got burned by a contract"
                      ]
                    },
                    {
                      "name": "UpdatedUsedResources",
                      "fields": [
                        {
                          "type": 110,
                          "typeName": "types::ContractResources"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Contract resources got updated"
                      ]
                    },
                    {
                      "name": "NruConsumptionReportReceived",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "types::NruConsumption"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Network resources report received for contract"
                      ]
                    },
                    {
                      "name": "RentContractCanceled",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "a Rent contract is canceled"
                      ]
                    },
                    {
                      "name": "ContractGracePeriodStarted",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "twin_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "block_number",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A Contract grace period is triggered"
                      ]
                    },
                    {
                      "name": "ContractGracePeriodEnded",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "twin_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A Contract grace period was ended"
                      ]
                    },
                    {
                      "name": "SolutionProviderCreated",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "types::SolutionProvider<T::AccountId>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "SolutionProviderApproved",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 52,
                          "typeName": "bool"
                        }
                      ],
                      "index": 16
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "Contract"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state",
                      "type": 97,
                      "typeName": "ContractState"
                    },
                    {
                      "name": "contract_id",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "twin_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "contract_type",
                      "type": 99,
                      "typeName": "ContractData<T>"
                    },
                    {
                      "name": "solution_provider_id",
                      "type": 55,
                      "typeName": "Option<u64>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "ContractState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "index": 0
                    },
                    {
                      "name": "Deleted",
                      "fields": [
                        {
                          "type": 98,
                          "typeName": "Cause"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "GracePeriod",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "Cause"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CanceledByUser",
                      "index": 0
                    },
                    {
                      "name": "OutOfFunds",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "ContractData"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NodeContract",
                      "fields": [
                        {
                          "type": 100,
                          "typeName": "NodeContract<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NameContract",
                      "fields": [
                        {
                          "type": 103,
                          "typeName": "NameContract<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "RentContract",
                      "fields": [
                        {
                          "type": 106,
                          "typeName": "RentContract"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "NodeContract"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "node_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "deployment_hash",
                      "type": 9,
                      "typeName": "DeploymentHash"
                    },
                    {
                      "name": "deployment_data",
                      "type": 101,
                      "typeName": "BoundedVec<u8, MaxDeploymentDataLength<T>>"
                    },
                    {
                      "name": "public_ips",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "public_ips_list",
                      "type": 102,
                      "typeName": "BoundedVec<ContractPublicIP<T>, MaxNodeContractPublicIPs<T>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 44
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 51,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "NameContract"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 104,
                      "typeName": "T::NameContractName"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "pallet_smart_contract",
                "name_contract",
                "NameContractName"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 105,
                      "typeName": "BoundedVec<u8, T::MaxNameContractNameLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "RentContract"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "node_id",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "Consumption"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "contract_id",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "cru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "sru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "hru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "mru",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "nru",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "ContractBill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "contract_id",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "discount_level",
                      "type": 109,
                      "typeName": "DiscountLevel"
                    },
                    {
                      "name": "amount_billed",
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "DiscountLevel"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Default",
                      "index": 1
                    },
                    {
                      "name": "Bronze",
                      "index": 2
                    },
                    {
                      "name": "Silver",
                      "index": 3
                    },
                    {
                      "name": "Gold",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "ContractResources"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "contract_id",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "used",
                      "type": 80,
                      "typeName": "Resources"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "NruConsumption"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "contract_id",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "window",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "nru",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "SolutionProvider"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "solution_provider_id",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "providers",
                      "type": 113,
                      "typeName": "Vec<Provider<AccountId>>"
                    },
                    {
                      "name": "description",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "link",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "approved",
                      "type": 52,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "def": {
                "sequence": {
                  "type": 114
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "Provider"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "take",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MintTransactionProposed",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "MintTransactionVoted",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "MintCompleted",
                      "fields": [
                        {
                          "type": 116,
                          "typeName": "MintTransaction<T::AccountId, T::BlockNumber>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "MintTransactionExpired",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "BurnTransactionCreated",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "BurnTransactionProposed",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "BurnTransactionSignatureAdded",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 117,
                          "typeName": "StellarSignature"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "BurnTransactionReady",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BurnTransactionProcessed",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "BurnTransaction<T::BlockNumber>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "BurnTransactionExpired",
                      "fields": [
                        {
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "RefundTransactionCreated",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "RefundTransactionsignatureAdded",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 117,
                          "typeName": "StellarSignature"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "RefundTransactionReady",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "RefundTransactionProcessed",
                      "fields": [
                        {
                          "type": 120,
                          "typeName": "RefundTransaction<T::BlockNumber>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "RefundTransactionExpired",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 14
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "MintTransaction"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "votes",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "StellarSignature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "signature",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "stellar_pub_key",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "BurnTransaction"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "amount",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "target",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "signatures",
                      "type": 119,
                      "typeName": "Vec<StellarSignature>"
                    },
                    {
                      "name": "sequence_number",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "def": {
                "sequence": {
                  "type": 117
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "RefundTransaction"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "amount",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "target",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "tx_hash",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "signatures",
                      "type": 119,
                      "typeName": "Vec<StellarSignature>"
                    },
                    {
                      "name": "sequence_number",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "pallet_tft_price",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PriceStored",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "OffchainWorkerExecuted",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AveragePriceStored",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AveragePriceIsAboveMaxPrice",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "AveragePriceIsBelowMinPrice",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Scheduled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Scheduled some task."
                      ]
                    },
                    {
                      "name": "Canceled",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Canceled some task."
                      ]
                    },
                    {
                      "name": "Dispatched",
                      "fields": [
                        {
                          "name": "task",
                          "type": 123,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 124,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Dispatched some task."
                      ]
                    },
                    {
                      "name": "CallLookupFailed",
                      "fields": [
                        {
                          "name": "task",
                          "type": 123,
                          "typeName": "TaskAddress<T::BlockNumber>"
                        },
                        {
                          "name": "id",
                          "type": 124,
                          "typeName": "Option<Vec<u8>>"
                        },
                        {
                          "name": "error",
                          "type": 125,
                          "typeName": "LookupError"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The call for the provided hash was not found so the task has been aborted."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 123,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 10
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 10
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "LookupError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "index": 0
                    },
                    {
                      "name": "BadFormat",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "pallet_burning",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BurnTransactionCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "pallet_kvstore",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EntrySet",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A user has set their entry"
                      ]
                    },
                    {
                      "name": "EntryGot",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A user has read their entry, leaving it in storage"
                      ]
                    },
                    {
                      "name": "EntryTaken",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A user has read their entry, removing it from storage"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "pallet_validator",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Bonded",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ValidatorCreated",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "type": 131,
                          "typeName": "types::Validator<T::AccountId>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ValidatorApproved",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "types::Validator<T::AccountId>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ValidatorActivated",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "types::Validator<T::AccountId>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ValidatorRemoved",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "types::Validator<T::AccountId>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "NodeValidatorChanged",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "NodeValidatorRemoved",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "pallet_validator",
                "types",
                "Validator"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "validator_node_account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stash_account",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "description",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "tf_connect_id",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "info",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "state",
                      "type": 132,
                      "typeName": "ValidatorRequestState"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "pallet_validator",
                "types",
                "ValidatorRequestState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "index": 0
                    },
                    {
                      "name": "Approved",
                      "index": 1
                    },
                    {
                      "name": "Validating",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "pallet_dao",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "voted",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "yes_weight",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "no_weight",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A proposal_hash was closed because its threshold was reached or after its duration was up."
                      ]
                    },
                    {
                      "name": "ClosedByCouncil",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "vetos",
                          "type": 134,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "CouncilMemberVeto",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 7
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 134,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 22,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 37,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "def": {
                "sequence": {
                  "type": 9
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "def": {
                "sequence": {
                  "type": 123
                }
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 140,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 141,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 140,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 143,
                          "typeName": "Perbill"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 144,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 146,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "def": {
                "sequence": {
                  "type": 145
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "def": {
                "tuple": [
                  10,
                  10
                ]
              }
            }
          },
          {
            "id": 146,
            "type": {
              "def": {
                "sequence": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 148,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 149
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 149,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 149,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 149,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 55,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 55,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 55,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 151,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 141,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 141,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 154,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 155
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 155
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "def": {
                "sequence": {
                  "type": 156
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "def": {
                "tuple": [
                  157,
                  4
                ]
              }
            }
          },
          {
            "id": 157,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 137,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 161,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 161,
            "type": {
              "def": {
                "compact": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 163
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 165,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 157,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 164,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "def": {
                "sequence": {
                  "type": 163
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 167
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 168,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 157
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 157,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "def": {
                "sequence": {
                  "type": 167
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "index": 0
                    },
                    {
                      "name": "V2_0_0",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 174,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "new_free",
                          "type": 174,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 174,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 174,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "value",
                          "type": 174,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "keep_alive",
                          "type": 52,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 38
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 172,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 173,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "def": {
                "compact": {
                  "type": 38
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 175,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "substrate_validator_set",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_validator",
                      "fields": [
                        {
                          "name": "validator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a new validator.",
                        "",
                        "New validator's session keys should be set in Session pallet before",
                        "calling this.",
                        "",
                        "The origin can be configured using the `AddRemoveOrigin` type in the",
                        "host runtime. Can also be set to sudo/root."
                      ]
                    },
                    {
                      "name": "remove_validator",
                      "fields": [
                        {
                          "name": "validator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a validator.",
                        "",
                        "The origin can be configured using the `AddRemoveOrigin` type in the",
                        "host runtime. Can also be set to sudo/root."
                      ]
                    },
                    {
                      "name": "add_validator_again",
                      "fields": [
                        {
                          "name": "validator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add an approved validator again when it comes back online.",
                        "",
                        "For this call, the dispatch origin must be the validator itself."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "substrate_validator_set",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooLowValidatorCount",
                      "index": 0,
                      "docs": [
                        "Target (post-removal) validator count is below the minimum."
                      ]
                    },
                    {
                      "name": "Duplicate",
                      "index": 1,
                      "docs": [
                        "Validator is already in the validator set."
                      ]
                    },
                    {
                      "name": "ValidatorNotApproved",
                      "index": 2,
                      "docs": [
                        "Validator is not approved for re-addition."
                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "index": 3,
                      "docs": [
                        "Only the validator can add itself back after coming online."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "sequence": {
                  "type": 179
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "def": {
                "tuple": [
                  0,
                  180
                ]
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "tfchain_runtime",
                "opaque",
                "SessionKeys"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "aura",
                      "type": 181,
                      "typeName": "</*«*/ Aura /*»*/ as $crate::BoundToRuntimeAppPublic>::Public"
                    },
                    {
                      "name": "grandpa",
                      "type": 34,
                      "typeName": "</*«*/ Grandpa /*»*/ as $crate::BoundToRuntimeAppPublic>::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 182,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "def": {
                "tuple": [
                  185,
                  10
                ]
              }
            }
          },
          {
            "id": 185,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 14,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_keys",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 180,
                          "typeName": "T::Keys"
                        },
                        {
                          "name": "proof",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the session key(s) of the function caller to `keys`.",
                        "Allows an account to set its session key prior to becoming a validator.",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be signed.",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                        "  `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                        "- DbWrites: `origin account`, `NextKeys`",
                        "- DbReads per key id: `KeyOwner`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "purge_keys",
                      "index": 1,
                      "docs": [
                        "Removes any session key(s) of the function caller.",
                        "",
                        "This doesn't take effect until the next session.",
                        "",
                        "The dispatch origin of this function must be Signed and the account must be either be",
                        "convertible to a validator ID using the chain's typical addressing system (this usually",
                        "means being a controller account) or directly convertible into a validator ID (which",
                        "usually means being a stash account).",
                        "",
                        "# <weight>",
                        "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                        "  of `T::Keys::key_ids()` which is fixed.",
                        "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                        "- DbWrites: `NextKeys`, `origin account`",
                        "- DbWrites per key id: `KeyOwner`",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "pallet_session",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0,
                      "docs": [
                        "Invalid ownership proof."
                      ]
                    },
                    {
                      "name": "NoAssociatedValidatorId",
                      "index": 1,
                      "docs": [
                        "No associated validator ID for account."
                      ]
                    },
                    {
                      "name": "DuplicatedKey",
                      "index": 2,
                      "docs": [
                        "Registered duplicate key."
                      ]
                    },
                    {
                      "name": "NoKeys",
                      "index": 3,
                      "docs": [
                        "No keys are associated with this account."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "index": 4,
                      "docs": [
                        "Key setting account is not live, so it's impossible to associate keys."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the session pallet."
              ]
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "index": 0
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Paused",
                      "index": 2
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "next_authorities",
                      "type": 190,
                      "typeName": "BoundedAuthorityList<Limit>"
                    },
                    {
                      "name": "forced",
                      "type": 56,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 33
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 32,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 192,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 203,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 192,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 203,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has",
                        "stalled. This will trigger a forced authority set change at the beginning",
                        "of the next session, to be enacted `delay` blocks after that. The delay",
                        "should be high enough to safely assume that the block signalling the",
                        "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                        "will start the new authority set using the given finalized block as base.",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId"
                    },
                    {
                      "name": "equivocation",
                      "type": 193,
                      "typeName": "Equivocation<H, N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "type": 194,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "type": 200,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 34
                },
                {
                  "name": "V",
                  "type": 195
                },
                {
                  "name": "S",
                  "type": 196
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 34,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 199,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 199,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 197,
                      "typeName": "ed25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 198,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "def": {
                "tuple": [
                  195,
                  196
                ]
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 34
                },
                {
                  "name": "V",
                  "type": 201
                },
                {
                  "name": "S",
                  "type": 196
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 34,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 202,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 202,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "def": {
                "tuple": [
                  201,
                  196
                ]
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 208,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 208,
                          "typeName": "Box<<T as Config>::Call>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "call",
                          "type": 208,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "tfchain_runtime",
                "Call"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 160,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 170,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ValidatorSet",
                      "fields": [
                        {
                          "type": 176,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ValidatorSet, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Session",
                      "fields": [
                        {
                          "type": 186,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 191,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 207,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Authorship",
                      "fields": [
                        {
                          "type": 209,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "TfgridModule",
                      "fields": [
                        {
                          "type": 213,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TfgridModule, Runtime>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "SmartContractModule",
                      "fields": [
                        {
                          "type": 229,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<SmartContractModule, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "TFTBridgeModule",
                      "fields": [
                        {
                          "type": 233,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TFTBridgeModule, Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "TFTPriceModule",
                      "fields": [
                        {
                          "type": 234,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TFTPriceModule, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Scheduler",
                      "fields": [
                        {
                          "type": 235,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "BurningModule",
                      "fields": [
                        {
                          "type": 238,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BurningModule, Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "TFKVStore",
                      "fields": [
                        {
                          "type": 239,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TFKVStore, Runtime>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 240,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "CouncilMembership",
                      "fields": [
                        {
                          "type": 241,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CouncilMembership, Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "RuntimeUpgrade",
                      "fields": [
                        {
                          "type": 242,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RuntimeUpgrade, Runtime>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Validator",
                      "fields": [
                        {
                          "type": 243,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Validator, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Dao",
                      "fields": [
                        {
                          "type": 244,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Dao, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 245,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 23
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_uncles",
                      "fields": [
                        {
                          "name": "new_uncles",
                          "type": 210,
                          "typeName": "Vec<T::Header>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Provide a set of uncles."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 210,
            "type": {
              "def": {
                "sequence": {
                  "type": 211
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 212
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 140,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 9,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 11,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_storage_version",
                      "fields": [
                        {
                          "name": "version",
                          "type": 214,
                          "typeName": "types::StorageVersion"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "create_farm",
                      "fields": [
                        {
                          "name": "name",
                          "type": 43,
                          "typeName": "FarmNameInput<T>"
                        },
                        {
                          "name": "public_ips",
                          "type": 215,
                          "typeName": "PublicIpListInput<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "update_farm",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 43,
                          "typeName": "FarmNameInput<T>"
                        },
                        {
                          "name": "pricing_policy_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "add_stellar_payout_v2address",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "stellar_address",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "set_farm_certification",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "certification",
                          "type": 49,
                          "typeName": "FarmCertification"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "add_farm_ip",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "ip",
                          "type": 46,
                          "typeName": "PublicIpIpInput"
                        },
                        {
                          "name": "gateway",
                          "type": 48,
                          "typeName": "PublicIpGatewayInput"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "remove_farm_ip",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "ip",
                          "type": 46,
                          "typeName": "PublicIpIpInput"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "delete_farm",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "create_node",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "resources",
                          "type": 80,
                          "typeName": "Resources"
                        },
                        {
                          "name": "location",
                          "type": 81,
                          "typeName": "Location"
                        },
                        {
                          "name": "country",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "city",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "interfaces",
                          "type": 218,
                          "typeName": "InterfaceInput<T>"
                        },
                        {
                          "name": "secure_boot",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "virtualized",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "serial_number",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "update_node",
                      "fields": [
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "resources",
                          "type": 80,
                          "typeName": "Resources"
                        },
                        {
                          "name": "location",
                          "type": 81,
                          "typeName": "Location"
                        },
                        {
                          "name": "country",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "city",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "interfaces",
                          "type": 83,
                          "typeName": "Vec<pallet::InterfaceOf<T>>"
                        },
                        {
                          "name": "secure_boot",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "virtualized",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "serial_number",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "set_node_certification",
                      "fields": [
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "node_certification",
                          "type": 84,
                          "typeName": "NodeCertification"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "report_uptime",
                      "fields": [
                        {
                          "name": "uptime",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "add_node_public_config",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "public_config",
                          "type": 223,
                          "typeName": "Option<PubConfigInput>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "delete_node",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "create_entity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "country",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "city",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "signature",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "update_entity",
                      "fields": [
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "country",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "city",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "delete_entity",
                      "index": 16
                    },
                    {
                      "name": "create_twin",
                      "fields": [
                        {
                          "name": "ip",
                          "type": 67,
                          "typeName": "TwinIpInput"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "update_twin",
                      "fields": [
                        {
                          "name": "ip",
                          "type": 67,
                          "typeName": "TwinIpInput"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "add_twin_entity",
                      "fields": [
                        {
                          "name": "twin_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "entity_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "signature",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "delete_twin_entity",
                      "fields": [
                        {
                          "name": "twin_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "entity_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "delete_twin",
                      "fields": [
                        {
                          "name": "twin_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "create_pricing_policy",
                      "fields": [
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "su",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "cu",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "nu",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "ipu",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "unique_name",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "domain_name",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "foundation_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "certified_sales_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "discount_for_dedication_nodes",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "update_pricing_policy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "su",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "cu",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "nu",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "ipu",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "unique_name",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "domain_name",
                          "type": 91,
                          "typeName": "types::Policy"
                        },
                        {
                          "name": "foundation_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "certified_sales_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "discount_for_dedication_nodes",
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "create_farming_policy",
                      "fields": [
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "su",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "cu",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "nu",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "ipv4",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "minimal_uptime",
                          "type": 94,
                          "typeName": "u16"
                        },
                        {
                          "name": "policy_end",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "immutable",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "default",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "node_certification",
                          "type": 84,
                          "typeName": "NodeCertification"
                        },
                        {
                          "name": "farm_certification",
                          "type": 49,
                          "typeName": "FarmCertification"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "user_accept_tc",
                      "fields": [
                        {
                          "name": "document_link",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "document_hash",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "delete_node_farm",
                      "fields": [
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "set_farm_dedicated",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "dedicated",
                          "type": 52,
                          "typeName": "bool"
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "force_reset_farm_ip",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "ip",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "set_connection_price",
                      "fields": [
                        {
                          "name": "price",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "add_node_certifier",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "remove_node_certifier",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "update_farming_policy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "su",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "cu",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "nu",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "ipv4",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "minimal_uptime",
                          "type": 94,
                          "typeName": "u16"
                        },
                        {
                          "name": "policy_end",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "default",
                          "type": 52,
                          "typeName": "bool"
                        },
                        {
                          "name": "node_certification",
                          "type": 84,
                          "typeName": "NodeCertification"
                        },
                        {
                          "name": "farm_certification",
                          "type": 49,
                          "typeName": "FarmCertification"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "attach_policy_to_farm",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "limits",
                          "type": 53,
                          "typeName": "Option<FarmingPolicyLimit>"
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "set_zos_version",
                      "fields": [
                        {
                          "name": "zos_version",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 34
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "StorageVersion"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Struct",
                      "index": 0
                    },
                    {
                      "name": "V2Struct",
                      "index": 1
                    },
                    {
                      "name": "V3Struct",
                      "index": 2
                    },
                    {
                      "name": "V4Struct",
                      "index": 3
                    },
                    {
                      "name": "V5Struct",
                      "index": 4
                    },
                    {
                      "name": "V6Struct",
                      "index": 5
                    },
                    {
                      "name": "V7Struct",
                      "index": 6
                    },
                    {
                      "name": "V8Struct",
                      "index": 7
                    },
                    {
                      "name": "V9Struct",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 216
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 217,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "PublicIpInput"
              ],
              "params": [
                {
                  "name": "IP",
                  "type": 46
                },
                {
                  "name": "GW",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip",
                      "type": 46,
                      "typeName": "IP"
                    },
                    {
                      "name": "gw",
                      "type": 48,
                      "typeName": "GW"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "def": {
                "sequence": {
                  "type": 216
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 219
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 222,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "Interface"
              ],
              "params": [
                {
                  "name": "Name",
                  "type": 73
                },
                {
                  "name": "Mac",
                  "type": 75
                },
                {
                  "name": "Ips",
                  "type": 220
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 73,
                      "typeName": "Name"
                    },
                    {
                      "name": "mac",
                      "type": 75,
                      "typeName": "Mac"
                    },
                    {
                      "name": "ips",
                      "type": 220,
                      "typeName": "Ips"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 78
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 221,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "def": {
                "sequence": {
                  "type": 78
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "def": {
                "sequence": {
                  "type": 219
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 224
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 224
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "PublicConfig"
              ],
              "params": [
                {
                  "name": "IP4",
                  "type": 225
                },
                {
                  "name": "IP6",
                  "type": 226
                },
                {
                  "name": "Domain",
                  "type": 228
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip4",
                      "type": 225,
                      "typeName": "IP4"
                    },
                    {
                      "name": "ip6",
                      "type": 226,
                      "typeName": "IP6"
                    },
                    {
                      "name": "domain",
                      "type": 228,
                      "typeName": "Domain"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "IP"
              ],
              "params": [
                {
                  "name": "IpAddr",
                  "type": 46
                },
                {
                  "name": "Gw",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip",
                      "type": 46,
                      "typeName": "IpAddr"
                    },
                    {
                      "name": "gw",
                      "type": 48,
                      "typeName": "Gw"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 227
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 227
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "tfchain_support",
                "types",
                "IP"
              ],
              "params": [
                {
                  "name": "IpAddr",
                  "type": 65
                },
                {
                  "name": "Gw",
                  "type": 67
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ip",
                      "type": 65,
                      "typeName": "IpAddr"
                    },
                    {
                      "name": "gw",
                      "type": 67,
                      "typeName": "Gw"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 70
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 70
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "pallet_smart_contract",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_node_contract",
                      "fields": [
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "deployment_hash",
                          "type": 9,
                          "typeName": "DeploymentHash"
                        },
                        {
                          "name": "deployment_data",
                          "type": 101,
                          "typeName": "DeploymentDataInput<T>"
                        },
                        {
                          "name": "public_ips",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "solution_provider_id",
                          "type": 55,
                          "typeName": "Option<u64>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "update_node_contract",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "deployment_hash",
                          "type": 9,
                          "typeName": "DeploymentHash"
                        },
                        {
                          "name": "deployment_data",
                          "type": 101,
                          "typeName": "DeploymentDataInput<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "cancel_contract",
                      "fields": [
                        {
                          "name": "contract_id",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "add_reports",
                      "fields": [
                        {
                          "name": "reports",
                          "type": 230,
                          "typeName": "Vec<types::Consumption>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "create_name_contract",
                      "fields": [
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "add_nru_reports",
                      "fields": [
                        {
                          "name": "reports",
                          "type": 231,
                          "typeName": "Vec<types::NruConsumption>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "report_contract_resources",
                      "fields": [
                        {
                          "name": "contract_resources",
                          "type": 232,
                          "typeName": "Vec<types::ContractResources>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "create_rent_contract",
                      "fields": [
                        {
                          "name": "node_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "solution_provider_id",
                          "type": 55,
                          "typeName": "Option<u64>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "create_solution_provider",
                      "fields": [
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "link",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "providers",
                          "type": 113,
                          "typeName": "Vec<types::Provider<T::AccountId>>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "approve_solution_provider",
                      "fields": [
                        {
                          "name": "solution_provider_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "approve",
                          "type": 52,
                          "typeName": "bool"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 230,
            "type": {
              "def": {
                "sequence": {
                  "type": 107
                }
              }
            }
          },
          {
            "id": 231,
            "type": {
              "def": {
                "sequence": {
                  "type": 111
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "def": {
                "sequence": {
                  "type": 110
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_bridge_validator",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "remove_bridge_validator",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "set_fee_account",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "set_withdraw_fee",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "set_deposit_fee",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "swap_to_stellar",
                      "fields": [
                        {
                          "name": "target_stellar_address",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "propose_or_vote_mint_transaction",
                      "fields": [
                        {
                          "name": "transaction",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "propose_burn_transaction_or_add_sig",
                      "fields": [
                        {
                          "name": "transaction_id",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "target",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "signature",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "stellar_pub_key",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "sequence_number",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "set_burn_transaction_executed",
                      "fields": [
                        {
                          "name": "transaction_id",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "create_refund_transaction_or_add_sig",
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "target",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "amount",
                          "type": 8,
                          "typeName": "u64"
                        },
                        {
                          "name": "signature",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "stellar_pub_key",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "sequence_number",
                          "type": 8,
                          "typeName": "u64"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "set_refund_transaction_executed",
                      "fields": [
                        {
                          "name": "tx_hash",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 10
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "pallet_tft_price",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_prices",
                      "fields": [
                        {
                          "name": "price",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "set_allowed_origin",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "set_min_tft_price",
                      "fields": [
                        {
                          "name": "price",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "set_max_tft_price",
                      "fields": [
                        {
                          "name": "price",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "schedule",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 236,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 237,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Anonymously schedule a task."
                      ]
                    },
                    {
                      "name": "cancel",
                      "fields": [
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Cancel an anonymously scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "when",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 236,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 237,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Schedule a named task."
                      ]
                    },
                    {
                      "name": "cancel_named",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Cancel a named scheduled task."
                      ]
                    },
                    {
                      "name": "schedule_after",
                      "fields": [
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 236,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 237,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Anonymously schedule a task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule`].",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "schedule_named_after",
                      "fields": [
                        {
                          "name": "id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "after",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "maybe_periodic",
                          "type": 236,
                          "typeName": "Option<schedule::Period<T::BlockNumber>>"
                        },
                        {
                          "name": "priority",
                          "type": 2,
                          "typeName": "schedule::Priority"
                        },
                        {
                          "name": "call",
                          "type": 237,
                          "typeName": "Box<CallOrHashOf<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Schedule a named task after a delay.",
                        "",
                        "# <weight>",
                        "Same as [`schedule_named`](Self::schedule_named).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 123
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 123
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "schedule",
                "MaybeHashed"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 208
                },
                {
                  "name": "Hash",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Value",
                      "fields": [
                        {
                          "type": 208,
                          "typeName": "T"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "pallet_burning",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "burn_tft",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "message",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "pallet_kvstore",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "key",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "value",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the value stored at a particular key"
                      ]
                    },
                    {
                      "name": "delete",
                      "fields": [
                        {
                          "name": "key",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Read the value stored at a particular key, while removing it from the map.",
                        "Also emit the read value in an event"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 134,
                          "typeName": "Vec<T::AccountId>"
                        },
                        {
                          "name": "prime",
                          "type": 39,
                          "typeName": "Option<T::AccountId>"
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 208,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 140,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 140,
                          "typeName": "MemberCount"
                        },
                        {
                          "name": "proposal",
                          "type": 208,
                          "typeName": "Box<<T as Config<I>>::Proposal>"
                        },
                        {
                          "name": "length_bound",
                          "type": 140,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 140,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "approve",
                          "type": 52,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "index",
                          "type": 140,
                          "typeName": "ProposalIndex"
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 161,
                          "typeName": "Weight"
                        },
                        {
                          "name": "length_bound",
                          "type": 140,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 134,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "pallet_runtime_upgrade",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "pallet_validator",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create_validator",
                      "fields": [
                        {
                          "name": "validator_node_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "stash_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "tf_connect_id",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "info",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create a request to become a validator",
                        "Validator account (signer): the account of the validator (this account will be added to the council)",
                        "Validator node account: the account that will validate on consensus layer",
                        "Stash account: the \"bank\" account of the validator (where rewards should be sent to) the stash should be bonded to a validator",
                        "Description: why someone wants to become a validator",
                        "Tf Connect ID: the threefold connect ID of the persion who wants to become a validator",
                        "Info: some public info about the validator (website link, blog link, ..)",
                        "A user can only have 1 validator request at a time"
                      ]
                    },
                    {
                      "name": "activate_validator_node",
                      "index": 1,
                      "docs": [
                        "Start participating in consensus",
                        "Will activate the Validator node account on consensus level",
                        "A user can only call this if his request to be a validator is approved by the council",
                        "Should be called when his node is synced and ready to start validating"
                      ]
                    },
                    {
                      "name": "change_validator_node_account",
                      "fields": [
                        {
                          "name": "new_node_validator_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Change validator node account",
                        "In case the Validator wishes to change his validator node account",
                        "he can call this method with the new node validator account",
                        "this new account will be added as a new consensus validator if he is validating already"
                      ]
                    },
                    {
                      "name": "bond",
                      "fields": [
                        {
                          "name": "validator",
                          "type": 171,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Bond an account to to a validator account",
                        "Just proves that the stash account is indeed under control of the validator account"
                      ]
                    },
                    {
                      "name": "approve_validator",
                      "fields": [
                        {
                          "name": "validator_account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Approve validator (council)",
                        "Approves a validator to be added as a council member and",
                        "to participate in consensus"
                      ]
                    },
                    {
                      "name": "remove_validator",
                      "fields": [
                        {
                          "name": "validator",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove validator",
                        "Removes a validator from:",
                        "1. Council",
                        "2. Storage",
                        "3. Consensus",
                        "Can only be called by the user or the council"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "pallet_dao",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 140,
                          "typeName": "u32"
                        },
                        {
                          "name": "action",
                          "type": 208,
                          "typeName": "Box<<T as Config>::Proposal>"
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "link",
                          "type": 10,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "duration",
                          "type": 56,
                          "typeName": "Option<T::BlockNumber>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "farm_id",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "approve",
                          "type": 52,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "veto",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "proposal_index",
                          "type": 140,
                          "typeName": "ProposalIndex"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 246,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>",
                        "",
                        "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                        "event is deposited. If a call failed and the batch was interrupted, then the",
                        "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                        "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                        "event is deposited."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 94,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 208,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Send a call through an indexed pseudonym of the sender.",
                        "",
                        "Filter from origin are passed along. The call will be dispatched with an origin which",
                        "use the same filter as the origin of this call.",
                        "",
                        "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                        "because you expect `proxy` to have been used prior in the call stack and you do not want",
                        "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                        "in the Multisig pallet instead.",
                        "",
                        "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                        "",
                        "The dispatch origin for this call must be _Signed_."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 246,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Send a batch of dispatch calls and atomically execute them.",
                        "The whole transaction will rollback and fail if any of the calls failed.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 247,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 208,
                          "typeName": "Box<<T as Config>::Call>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Dispatches a function call with a provided origin.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 246,
                          "typeName": "Vec<<T as Config>::Call>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Send a batch of dispatch calls.",
                        "Unlike `batch`, it allows errors and won't interrupt.",
                        "",
                        "May be called from any origin.",
                        "",
                        "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                        "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                        "",
                        "If origin is root then call are dispatch without checking origin filter. (This includes",
                        "bypassing `frame_system::Config::BaseCallFilter`).",
                        "",
                        "# <weight>",
                        "- Complexity: O(C) where C is the number of calls to be batched.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 246,
            "type": {
              "def": {
                "sequence": {
                  "type": 208
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "tfchain_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 248,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "type": 249,
                          "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 203,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_collective",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Members",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        },
                        {
                          "type": 4,
                          "typeName": "MemberCount"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Member",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "_Phantom",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 251,
            "type": {
              "def": {
                "sequence": {
                  "type": 252
                }
              }
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "pallet_authorship",
                "UncleEntryItem"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 9
                },
                {
                  "name": "Author",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InclusionHeight",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "BlockNumber"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Uncle",
                      "fields": [
                        {
                          "type": 9,
                          "typeName": "Hash"
                        },
                        {
                          "type": 39,
                          "typeName": "Option<Author>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "pallet_authorship",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidUncleParent",
                      "index": 0,
                      "docs": [
                        "The uncle parent not in the chain."
                      ]
                    },
                    {
                      "name": "UnclesAlreadySet",
                      "index": 1,
                      "docs": [
                        "Uncles already set in the block."
                      ]
                    },
                    {
                      "name": "TooManyUncles",
                      "index": 2,
                      "docs": [
                        "Too many uncles."
                      ]
                    },
                    {
                      "name": "GenesisUncle",
                      "index": 3,
                      "docs": [
                        "The uncle is genesis."
                      ]
                    },
                    {
                      "name": "TooHighUncle",
                      "index": 4,
                      "docs": [
                        "The uncle is too high in chain."
                      ]
                    },
                    {
                      "name": "UncleAlreadyIncluded",
                      "index": 5,
                      "docs": [
                        "The uncle is already included."
                      ]
                    },
                    {
                      "name": "OldUncle",
                      "index": 6,
                      "docs": [
                        "The uncle isn't recent enough to be included."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 254,
            "type": {
              "def": {
                "sequence": {
                  "type": 255
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "pallet_tfgrid",
                "types",
                "TermsAndConditions"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "timestamp",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "document_link",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "document_hash",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "pallet_tfgrid",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoneValue",
                      "index": 0
                    },
                    {
                      "name": "StorageOverflow",
                      "index": 1
                    },
                    {
                      "name": "CannotCreateNode",
                      "index": 2
                    },
                    {
                      "name": "NodeNotExists",
                      "index": 3
                    },
                    {
                      "name": "NodeWithTwinIdExists",
                      "index": 4
                    },
                    {
                      "name": "CannotDeleteNode",
                      "index": 5
                    },
                    {
                      "name": "NodeDeleteNotAuthorized",
                      "index": 6
                    },
                    {
                      "name": "NodeUpdateNotAuthorized",
                      "index": 7
                    },
                    {
                      "name": "FarmExists",
                      "index": 8
                    },
                    {
                      "name": "FarmNotExists",
                      "index": 9
                    },
                    {
                      "name": "CannotCreateFarmWrongTwin",
                      "index": 10
                    },
                    {
                      "name": "CannotUpdateFarmWrongTwin",
                      "index": 11
                    },
                    {
                      "name": "CannotDeleteFarm",
                      "index": 12
                    },
                    {
                      "name": "CannotDeleteFarmWithPublicIPs",
                      "index": 13
                    },
                    {
                      "name": "CannotDeleteFarmWithNodesAssigned",
                      "index": 14
                    },
                    {
                      "name": "CannotDeleteFarmWrongTwin",
                      "index": 15
                    },
                    {
                      "name": "IpExists",
                      "index": 16
                    },
                    {
                      "name": "IpNotExists",
                      "index": 17
                    },
                    {
                      "name": "EntityWithNameExists",
                      "index": 18
                    },
                    {
                      "name": "EntityWithPubkeyExists",
                      "index": 19
                    },
                    {
                      "name": "EntityNotExists",
                      "index": 20
                    },
                    {
                      "name": "EntitySignatureDoesNotMatch",
                      "index": 21
                    },
                    {
                      "name": "EntityWithSignatureAlreadyExists",
                      "index": 22
                    },
                    {
                      "name": "CannotUpdateEntity",
                      "index": 23
                    },
                    {
                      "name": "CannotDeleteEntity",
                      "index": 24
                    },
                    {
                      "name": "SignatureLenghtIsIncorrect",
                      "index": 25
                    },
                    {
                      "name": "TwinExists",
                      "index": 26
                    },
                    {
                      "name": "TwinNotExists",
                      "index": 27
                    },
                    {
                      "name": "TwinWithPubkeyExists",
                      "index": 28
                    },
                    {
                      "name": "CannotCreateTwin",
                      "index": 29
                    },
                    {
                      "name": "UnauthorizedToUpdateTwin",
                      "index": 30
                    },
                    {
                      "name": "PricingPolicyExists",
                      "index": 31
                    },
                    {
                      "name": "PricingPolicyNotExists",
                      "index": 32
                    },
                    {
                      "name": "PricingPolicyWithDifferentIdExists",
                      "index": 33
                    },
                    {
                      "name": "CertificationCodeExists",
                      "index": 34
                    },
                    {
                      "name": "FarmingPolicyAlreadyExists",
                      "index": 35
                    },
                    {
                      "name": "FarmPayoutAdressAlreadyRegistered",
                      "index": 36
                    },
                    {
                      "name": "FarmerDoesNotHaveEnoughFunds",
                      "index": 37
                    },
                    {
                      "name": "UserDidNotSignTermsAndConditions",
                      "index": 38
                    },
                    {
                      "name": "FarmerDidNotSignTermsAndConditions",
                      "index": 39
                    },
                    {
                      "name": "FarmerNotAuthorized",
                      "index": 40
                    },
                    {
                      "name": "InvalidFarmName",
                      "index": 41
                    },
                    {
                      "name": "AlreadyCertifier",
                      "index": 42
                    },
                    {
                      "name": "NotCertifier",
                      "index": 43
                    },
                    {
                      "name": "NotAllowedToCertifyNode",
                      "index": 44
                    },
                    {
                      "name": "FarmingPolicyNotExists",
                      "index": 45
                    },
                    {
                      "name": "TwinIpTooShort",
                      "index": 46
                    },
                    {
                      "name": "TwinIpTooLong",
                      "index": 47
                    },
                    {
                      "name": "InvalidTwinIp",
                      "index": 48
                    },
                    {
                      "name": "FarmNameTooShort",
                      "index": 49
                    },
                    {
                      "name": "FarmNameTooLong",
                      "index": 50
                    },
                    {
                      "name": "InvalidPublicIP",
                      "index": 51
                    },
                    {
                      "name": "PublicIPToShort",
                      "index": 52
                    },
                    {
                      "name": "PublicIPToLong",
                      "index": 53
                    },
                    {
                      "name": "GatewayIPToShort",
                      "index": 54
                    },
                    {
                      "name": "GatewayIPToLong",
                      "index": 55
                    },
                    {
                      "name": "IP4ToShort",
                      "index": 56
                    },
                    {
                      "name": "IP4ToLong",
                      "index": 57
                    },
                    {
                      "name": "InvalidIP4",
                      "index": 58
                    },
                    {
                      "name": "GW4ToShort",
                      "index": 59
                    },
                    {
                      "name": "GW4ToLong",
                      "index": 60
                    },
                    {
                      "name": "InvalidGW4",
                      "index": 61
                    },
                    {
                      "name": "IP6ToShort",
                      "index": 62
                    },
                    {
                      "name": "IP6ToLong",
                      "index": 63
                    },
                    {
                      "name": "InvalidIP6",
                      "index": 64
                    },
                    {
                      "name": "GW6ToShort",
                      "index": 65
                    },
                    {
                      "name": "GW6ToLong",
                      "index": 66
                    },
                    {
                      "name": "InvalidGW6",
                      "index": 67
                    },
                    {
                      "name": "DomainToShort",
                      "index": 68
                    },
                    {
                      "name": "DomainToLong",
                      "index": 69
                    },
                    {
                      "name": "InvalidDomain",
                      "index": 70
                    },
                    {
                      "name": "MethodIsDeprecated",
                      "index": 71
                    },
                    {
                      "name": "InterfaceNameToShort",
                      "index": 72
                    },
                    {
                      "name": "InterfaceNameToLong",
                      "index": 73
                    },
                    {
                      "name": "InvalidInterfaceName",
                      "index": 74
                    },
                    {
                      "name": "InterfaceMacToShort",
                      "index": 75
                    },
                    {
                      "name": "InterfaceMacToLong",
                      "index": 76
                    },
                    {
                      "name": "InvalidMacAddress",
                      "index": 77
                    },
                    {
                      "name": "InterfaceIpToShort",
                      "index": 78
                    },
                    {
                      "name": "InterfaceIpToLong",
                      "index": 79
                    },
                    {
                      "name": "InvalidInterfaceIP",
                      "index": 80
                    },
                    {
                      "name": "InvalidZosVersion",
                      "index": 81
                    },
                    {
                      "name": "FarmingPolicyExpired",
                      "index": 82
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "ContractBillingInformation"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "previous_nu_reported",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "last_updated",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "amount_unbilled",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "def": {
                "tuple": [
                  4,
                  9
                ]
              }
            }
          },
          {
            "id": 259,
            "type": {
              "def": {
                "sequence": {
                  "type": 8
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "ContractLock"
              ],
              "params": [
                {
                  "name": "BalanceOf",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount_locked",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "lock_updated",
                      "type": 8,
                      "typeName": "u64"
                    },
                    {
                      "name": "cycles",
                      "type": 94,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "path": [
                "pallet_smart_contract",
                "types",
                "StorageVersion"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    },
                    {
                      "name": "V3",
                      "index": 2
                    },
                    {
                      "name": "V4",
                      "index": 3
                    },
                    {
                      "name": "V5",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_smart_contract",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TwinNotExists",
                      "index": 0
                    },
                    {
                      "name": "NodeNotExists",
                      "index": 1
                    },
                    {
                      "name": "FarmNotExists",
                      "index": 2
                    },
                    {
                      "name": "FarmHasNotEnoughPublicIPs",
                      "index": 3
                    },
                    {
                      "name": "FarmHasNotEnoughPublicIPsFree",
                      "index": 4
                    },
                    {
                      "name": "FailedToReserveIP",
                      "index": 5
                    },
                    {
                      "name": "FailedToFreeIPs",
                      "index": 6
                    },
                    {
                      "name": "ContractNotExists",
                      "index": 7
                    },
                    {
                      "name": "TwinNotAuthorizedToUpdateContract",
                      "index": 8
                    },
                    {
                      "name": "TwinNotAuthorizedToCancelContract",
                      "index": 9
                    },
                    {
                      "name": "NodeNotAuthorizedToDeployContract",
                      "index": 10
                    },
                    {
                      "name": "NodeNotAuthorizedToComputeReport",
                      "index": 11
                    },
                    {
                      "name": "PricingPolicyNotExists",
                      "index": 12
                    },
                    {
                      "name": "ContractIsNotUnique",
                      "index": 13
                    },
                    {
                      "name": "NameExists",
                      "index": 14
                    },
                    {
                      "name": "NameNotValid",
                      "index": 15
                    },
                    {
                      "name": "InvalidContractType",
                      "index": 16
                    },
                    {
                      "name": "TFTPriceValueError",
                      "index": 17
                    },
                    {
                      "name": "NotEnoughResourcesOnNode",
                      "index": 18
                    },
                    {
                      "name": "NodeNotAuthorizedToReportResources",
                      "index": 19
                    },
                    {
                      "name": "MethodIsDeprecated",
                      "index": 20
                    },
                    {
                      "name": "NodeHasActiveContracts",
                      "index": 21
                    },
                    {
                      "name": "NodeHasRentContract",
                      "index": 22
                    },
                    {
                      "name": "NodeIsNotDedicated",
                      "index": 23
                    },
                    {
                      "name": "NodeNotAvailableToDeploy",
                      "index": 24
                    },
                    {
                      "name": "CannotUpdateContractInGraceState",
                      "index": 25
                    },
                    {
                      "name": "NumOverflow",
                      "index": 26
                    },
                    {
                      "name": "NameContractNameToShort",
                      "index": 27
                    },
                    {
                      "name": "NameContractNameToLong",
                      "index": 28
                    },
                    {
                      "name": "InvalidProviderConfiguration",
                      "index": 29
                    },
                    {
                      "name": "NoSuchSolutionProvider",
                      "index": 30
                    },
                    {
                      "name": "SolutionProviderNotApproved",
                      "index": 31
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "pallet_tft_bridge",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ValidatorExists",
                      "index": 0
                    },
                    {
                      "name": "ValidatorNotExists",
                      "index": 1
                    },
                    {
                      "name": "TransactionValidatorExists",
                      "index": 2
                    },
                    {
                      "name": "TransactionValidatorNotExists",
                      "index": 3
                    },
                    {
                      "name": "MintTransactionExists",
                      "index": 4
                    },
                    {
                      "name": "MintTransactionAlreadyExecuted",
                      "index": 5
                    },
                    {
                      "name": "MintTransactionNotExists",
                      "index": 6
                    },
                    {
                      "name": "BurnTransactionExists",
                      "index": 7
                    },
                    {
                      "name": "BurnTransactionNotExists",
                      "index": 8
                    },
                    {
                      "name": "BurnSignatureExists",
                      "index": 9
                    },
                    {
                      "name": "EnoughBurnSignaturesPresent",
                      "index": 10
                    },
                    {
                      "name": "RefundSignatureExists",
                      "index": 11
                    },
                    {
                      "name": "BurnTransactionAlreadyExecuted",
                      "index": 12
                    },
                    {
                      "name": "RefundTransactionNotExists",
                      "index": 13
                    },
                    {
                      "name": "RefundTransactionAlreadyExecuted",
                      "index": 14
                    },
                    {
                      "name": "EnoughRefundSignaturesPresent",
                      "index": 15
                    },
                    {
                      "name": "NotEnoughBalanceToSwap",
                      "index": 16
                    },
                    {
                      "name": "AmountIsLessThanWithdrawFee",
                      "index": 17
                    },
                    {
                      "name": "AmountIsLessThanDepositFee",
                      "index": 18
                    },
                    {
                      "name": "WrongParametersProvided",
                      "index": 19
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 264,
            "type": {
              "def": {
                "tuple": [
                  94,
                  94
                ]
              }
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "pallet_tft_price",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ErrFetchingPrice",
                      "index": 0
                    },
                    {
                      "name": "OffchainSignedTxError",
                      "index": 1
                    },
                    {
                      "name": "NoLocalAcctForSigning",
                      "index": 2
                    },
                    {
                      "name": "AccountUnauthorizedToSetPrice",
                      "index": 3
                    },
                    {
                      "name": "MaxPriceBelowMinPriceError",
                      "index": 4
                    },
                    {
                      "name": "MinPriceAboveMaxPriceError",
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 266,
            "type": {
              "def": {
                "sequence": {
                  "type": 267
                }
              }
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 268
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 268
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "pallet_scheduler",
                "ScheduledV3"
              ],
              "params": [
                {
                  "name": "Call",
                  "type": 237
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "PalletsOrigin",
                  "type": 247
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "maybe_id",
                      "type": 124,
                      "typeName": "Option<Vec<u8>>"
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority"
                    },
                    {
                      "name": "call",
                      "type": 237,
                      "typeName": "Call"
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 236,
                      "typeName": "Option<schedule::Period<BlockNumber>>"
                    },
                    {
                      "name": "origin",
                      "type": 247,
                      "typeName": "PalletsOrigin"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToSchedule",
                      "index": 0,
                      "docs": [
                        "Failed to schedule a call"
                      ]
                    },
                    {
                      "name": "NotFound",
                      "index": 1,
                      "docs": [
                        "Cannot find the scheduled call."
                      ]
                    },
                    {
                      "name": "TargetBlockNumberInPast",
                      "index": 2,
                      "docs": [
                        "Given target block number is in the past."
                      ]
                    },
                    {
                      "name": "RescheduleNoChange",
                      "index": 3,
                      "docs": [
                        "Reschedule failed because it does not change scheduled time."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 270,
            "type": {
              "def": {
                "sequence": {
                  "type": 271
                }
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "pallet_burning",
                "Burn"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BalanceOf",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf"
                    },
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "message",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "path": [
                "pallet_burning",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotEnoughBalanceToBurn",
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 273,
            "type": {
              "def": {
                "tuple": [
                  0,
                  10
                ]
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "pallet_kvstore",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoValueStored",
                      "index": 0,
                      "docs": [
                        "The requested user has not stored a value yet"
                      ]
                    },
                    {
                      "name": "KeyIsTooLarge",
                      "index": 1
                    },
                    {
                      "name": "ValueIsTooLarge",
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "frame_support",
                "storage",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 137,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount"
                    },
                    {
                      "name": "ayes",
                      "type": 134,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "nays",
                      "type": 134,
                      "typeName": "Vec<AccountId>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "pallet_validator",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadOrigin",
                      "index": 0
                    },
                    {
                      "name": "AlreadyBonded",
                      "index": 1
                    },
                    {
                      "name": "StashNotBonded",
                      "index": 2
                    },
                    {
                      "name": "StashBondedWithWrongValidator",
                      "index": 3
                    },
                    {
                      "name": "CannotBondWithSameAccount",
                      "index": 4
                    },
                    {
                      "name": "DuplicateValidator",
                      "index": 5
                    },
                    {
                      "name": "ValidatorNotFound",
                      "index": 6
                    },
                    {
                      "name": "ValidatorNotApproved",
                      "index": 7
                    },
                    {
                      "name": "UnauthorizedToActivateValidator",
                      "index": 8
                    },
                    {
                      "name": "ValidatorValidatingAlready",
                      "index": 9
                    },
                    {
                      "name": "ValidatorNotValidating",
                      "index": 10
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pallet_dao",
                "proposal",
                "DaoProposal"
              ],
              "params": [
                {
                  "name": "ProposalIndex",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "description",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "link",
                      "type": 10,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "pallet_dao",
                "proposal",
                "DaoVotes"
              ],
              "params": [
                {
                  "name": "ProposalIndex",
                  "type": 4
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex"
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "ayes",
                      "type": 282,
                      "typeName": "Vec<VoteWeight>"
                    },
                    {
                      "name": "nays",
                      "type": 282,
                      "typeName": "Vec<VoteWeight>"
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "vetos",
                      "type": 134,
                      "typeName": "Vec<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "def": {
                "sequence": {
                  "type": 283
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "pallet_dao",
                "proposal",
                "VoteWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "farm_id",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "pallet_dao",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoneValue",
                      "index": 0
                    },
                    {
                      "name": "StorageOverflow",
                      "index": 1
                    },
                    {
                      "name": "FarmNotExists",
                      "index": 2
                    },
                    {
                      "name": "NotCouncilMember",
                      "index": 3
                    },
                    {
                      "name": "WrongProposalLength",
                      "index": 4
                    },
                    {
                      "name": "DuplicateProposal",
                      "index": 5
                    },
                    {
                      "name": "NotAuthorizedToVote",
                      "index": 6
                    },
                    {
                      "name": "ProposalMissing",
                      "index": 7
                    },
                    {
                      "name": "WrongIndex",
                      "index": 8
                    },
                    {
                      "name": "DuplicateVote",
                      "index": 9
                    },
                    {
                      "name": "WrongProposalWeight",
                      "index": 10
                    },
                    {
                      "name": "TooEarly",
                      "index": 11
                    },
                    {
                      "name": "TimeLimitReached",
                      "index": 12
                    },
                    {
                      "name": "OngoingVoteAndTresholdStillNotMet",
                      "index": 13
                    },
                    {
                      "name": "FarmHasNoNodes",
                      "index": 14
                    },
                    {
                      "name": "InvalidProposalDuration",
                      "index": 15
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 171
                },
                {
                  "name": "Call",
                  "type": 208
                },
                {
                  "name": "Signature",
                  "type": 287
                },
                {
                  "name": "Extra",
                  "type": 291
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 288,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 289,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 198,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 290,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 290,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "def": {
                "tuple": [
                  292,
                  293,
                  294,
                  295,
                  296,
                  298,
                  299,
                  300
                ]
              }
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 297,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 140,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 174,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "tfchain_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 9
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 15
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 138
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 139
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 52
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 52
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 136
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 142
          },
          "event": {
            "ty": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 147,
              "value": [
                224,
                104,
                124,
                62,
                1,
                0,
                0,
                0,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                184,
                32,
                29,
                5,
                0,
                0,
                0,
                0,
                1,
                72,
                167,
                236,
                168,
                46,
                1,
                0,
                0,
                1,
                0,
                152,
                247,
                62,
                93,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                184,
                32,
                29,
                5,
                0,
                0,
                0,
                0,
                1,
                72,
                47,
                63,
                19,
                163,
                1,
                0,
                0,
                1,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                1,
                0,
                136,
                82,
                106,
                116,
                0,
                0,
                0,
                184,
                32,
                29,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 150,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                96,
                9,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 152,
              "value": [
                64,
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 153,
              "value": [
                76,
                115,
                117,
                98,
                115,
                116,
                114,
                97,
                116,
                101,
                45,
                116,
                104,
                114,
                101,
                101,
                102,
                111,
                108,
                100,
                76,
                115,
                117,
                98,
                115,
                116,
                114,
                97,
                116,
                101,
                45,
                116,
                104,
                114,
                101,
                101,
                102,
                111,
                108,
                100,
                1,
                0,
                0,
                0,
                115,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                40,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                1,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                237,
                153,
                197,
                172,
                178,
                94,
                237,
                245,
                3,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                1,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 94,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 158
          },
          "index": 0
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "entries": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "ty": {
                  "Plain": 159
                },
                "default": [
                  0
                ],
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 52
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 160
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 8,
              "value": [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 2
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 162
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 166
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 169
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "ty": 170
          },
          "event": {
            "ty": 27
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                244,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 175
          },
          "index": 3
        },
        {
          "name": "ValidatorSet",
          "storage": {
            "prefix": "ValidatorSet",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ApprovedValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "OfflineValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 176
          },
          "event": {
            "ty": 29
          },
          "constants": [],
          "error": {
            "ty": 177
          },
          "index": 4
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "ty": {
                  "Plain": 52
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 178
                },
                "default": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 183
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 180
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 184,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 186
          },
          "event": {
            "ty": 30
          },
          "constants": [],
          "error": {
            "ty": 187
          },
          "index": 5
        },
        {
          "name": "Aura",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 6
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": "Default",
                "ty": {
                  "Plain": 188
                },
                "default": [
                  0
                ],
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 189
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "ty": {
                  "Plain": 123
                },
                "default": [
                  0
                ],
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "ty": 191
          },
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "error": {
            "ty": 204
          },
          "index": 7
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 205
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 206
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 8
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 207
          },
          "event": {
            "ty": 36
          },
          "constants": [],
          "error": {
            "ty": 250
          },
          "index": 9
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "entries": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 251
                },
                "default": [
                  0
                ],
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "ty": {
                  "Plain": 52
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 209
          },
          "event": null,
          "constants": [
            {
              "name": "UncleGenerations",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of blocks back we should accept uncles.",
                " This means that we will deal with uncle-parents that are",
                " `UncleGenerations + 1` before `now`."
              ]
            }
          ],
          "error": {
            "ty": 253
          },
          "index": 10
        },
        {
          "name": "TfgridModule",
          "storage": {
            "prefix": "TfgridModule",
            "entries": [
              {
                "name": "Farms",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 41
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "NodesByFarmID",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 183
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "FarmIdByName",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "FarmPayoutV2AddressByFarmID",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Nodes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 57
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "NodeIdByTwinID",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "Entities",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 85
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "EntityIdByAccountID",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "EntityIdByName",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "Twins",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 86
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "TwinIdByAccountID",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PricingPolicies",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 90
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "PricingPolicyIdByName",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "FarmingPoliciesMap",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 93
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "UsersTermsAndConditions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 254
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "AllowedNodeCertifiers",
                "modifier": "Optional",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ConnectionPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "FarmID",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "NodeID",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "EntityID",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TwinID",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "PricingPolicyID",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "FarmingPolicyID",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "PalletVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 214
                },
                "default": [
                  4
                ],
                "docs": []
              },
              {
                "name": "ZosVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 213
          },
          "event": {
            "ty": 40
          },
          "constants": [
            {
              "name": "MaxFarmNameLength",
              "ty": 4,
              "value": [
                40,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxFarmPublicIps",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxInterfacesLength",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxInterfaceIpsLength",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 256
          },
          "index": 11
        },
        {
          "name": "SmartContractModule",
          "storage": {
            "prefix": "SmartContractModule",
            "entries": [
              {
                "name": "Contracts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 96
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ContractBillingInformationByID",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 257
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "NodeContractResources",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 110
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ContractIDByNodeIDAndHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 258,
                    "value": 8
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ActiveNodeContracts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 259
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ContractsToBillAt",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 259
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ContractLock",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 260
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ContractIDByNameRegistration",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 104,
                    "value": 8
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ActiveRentContractForNode",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 8
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ContractID",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "SolutionProviders",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 112
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "SolutionProviderID",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "PalletVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 261
                },
                "default": [
                  2
                ],
                "docs": []
              },
              {
                "name": "BillingFrequency",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  88,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 229
          },
          "event": {
            "ty": 95
          },
          "constants": [
            {
              "name": "MaxNameContractNameLength",
              "ty": 4,
              "value": [
                64,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxDeploymentDataLength",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxNodeContractPublicIps",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 262
          },
          "index": 12
        },
        {
          "name": "TFTBridgeModule",
          "storage": {
            "prefix": "TFTBridgeModule",
            "entries": [
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "FeeAccount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "MintTransactions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 116
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ExecutedMintTransactions",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 116
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "BurnTransactions",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 118
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ExecutedBurnTransactions",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 8,
                    "value": 118
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "RefundTransactions",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 120
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "ExecutedRefundTransactions",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 10,
                    "value": 120
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "BurnTransactionID",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "WithdrawFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "DepositFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 233
          },
          "event": {
            "ty": 115
          },
          "constants": [],
          "error": {
            "ty": 263
          },
          "index": 13
        },
        {
          "name": "TFTPriceModule",
          "storage": {
            "prefix": "TFTPriceModule",
            "entries": [
              {
                "name": "TftPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "LastBlockSet",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "AverageTftPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "TftPriceHistory",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 94,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "BufferRange",
                "modifier": "Default",
                "ty": {
                  "Plain": 264
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "AllowedOrigin",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "MinTftPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "MaxTftPrice",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 234
          },
          "event": {
            "ty": 121
          },
          "constants": [],
          "error": {
            "ty": 265
          },
          "index": 14
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "entries": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 266
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 123
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Lookup from identity to the block number and index of the task."
                ]
              }
            ]
          },
          "calls": {
            "ty": 235
          },
          "event": {
            "ty": 122
          },
          "constants": [
            {
              "name": "MaximumWeight",
              "ty": 8,
              "value": [
                0,
                128,
                110,
                135,
                116,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables of less",
                " priority than `schedule::HARD_DEADLINE`."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                " Not strictly enforced, but used for weight estimation."
              ]
            }
          ],
          "error": {
            "ty": 269
          },
          "index": 15
        },
        {
          "name": "BurningModule",
          "storage": {
            "prefix": "BurningModule",
            "entries": [
              {
                "name": "Burns",
                "modifier": "Optional",
                "ty": {
                  "Plain": 270
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 238
          },
          "event": {
            "ty": 126
          },
          "constants": [],
          "error": {
            "ty": 272
          },
          "index": 16
        },
        {
          "name": "TFKVStore",
          "storage": {
            "prefix": "TFKVStore",
            "entries": [
              {
                "name": "TFKVStore",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 273,
                    "value": 10
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 239
          },
          "event": {
            "ty": 127
          },
          "constants": [],
          "error": {
            "ty": 274
          },
          "index": 17
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "entries": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "ty": {
                  "Plain": 275
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 208
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 276
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "ty": 240
          },
          "event": {
            "ty": 128
          },
          "constants": [],
          "error": {
            "ty": 277
          },
          "index": 18
        },
        {
          "name": "CouncilMembership",
          "storage": {
            "prefix": "CouncilMembership",
            "entries": [
              {
                "name": "Members",
                "modifier": "Default",
                "ty": {
                  "Plain": 134
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "ty": 241
          },
          "event": {
            "ty": 129
          },
          "constants": [],
          "error": {
            "ty": 278
          },
          "index": 19
        },
        {
          "name": "RuntimeUpgrade",
          "storage": null,
          "calls": {
            "ty": 242
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 20
        },
        {
          "name": "Validator",
          "storage": {
            "prefix": "Validator",
            "entries": [
              {
                "name": "Validator",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 131
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 243
          },
          "event": {
            "ty": 130
          },
          "constants": [],
          "error": {
            "ty": 279
          },
          "index": 21
        },
        {
          "name": "Dao",
          "storage": {
            "prefix": "Dao",
            "entries": [
              {
                "name": "ProposalList",
                "modifier": "Default",
                "ty": {
                  "Plain": 137
                },
                "default": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 280
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A map that indexes a hash to an active proposal object."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 208
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 281
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "FarmWeight",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 8
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 244
          },
          "event": {
            "ty": 133
          },
          "constants": [],
          "error": {
            "ty": 284
          },
          "index": 22
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 245
          },
          "event": {
            "ty": 135
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 285
          },
          "index": 23
        }
      ],
      "extrinsic": {
        "ty": 286,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 292,
            "additional_signed": 38
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 293,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 294,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 295,
            "additional_signed": 9
          },
          {
            "identifier": "CheckMortality",
            "ty": 296,
            "additional_signed": 9
          },
          {
            "identifier": "CheckNonce",
            "ty": 298,
            "additional_signed": 38
          },
          {
            "identifier": "CheckWeight",
            "ty": 299,
            "additional_signed": 38
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 300,
            "additional_signed": 38
          }
        ]
      },
      "ty": 301
    }
  }
]
